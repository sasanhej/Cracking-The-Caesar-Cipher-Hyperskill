type: edu
files:
- name: solution.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import CheckResult, TestedProgram, StageTest, dynamic_test, WrongAnswer
    import string


    def encoder_2(message):
        # making the encoded message
        # string 'butterscotch' becomes string 'y r q q b o p z l q z e'
        # this uses the string.ascii_lowercase string which is 'abcdefghijklmnopqrstuvwxyz'
        # and adds a shift
        left_shift = 3
        # an encoded message will make an IndexError if the deciphering shift leaves the string's range
        # so a modulus is used
        message = message.lower()
        message_list = list(message)
        message_encoded_nums = [string.ascii_lowercase.index(letter) - left_shift for letter in message]
        message_encoded = [string.ascii_lowercase[index % 26] for index in message_encoded_nums]
        message_encoded = ' '.join(message_encoded)
        return message_encoded


    class DecipherTest(StageTest):
        test_data = [
            'Butterscotch'
            'Cheesecake',
            'Hello',
            'World',
            'Dog',
            'Mousse',
            'myxdogxisxsuperxlazy'
        ]

        @dynamic_test(data=test_data)
        def test(self, x):
            encoded_message = encoder_2(x)  # a string with letters separated by spaces
            pr = TestedProgram()
            pr.start()
            output = pr.execute(stdin=encoded_message)
            if not output:
                raise WrongAnswer('Your program did not print anything.')
            if not output.isascii():
                raise WrongAnswer('This string contains non-ascii values.')
            output_cleaned = output.lower().strip().replace(' ', '')
            check = x.lower().replace(' ', '') in output_cleaned
            return CheckResult(check, f'Wrong message returned.\n'
                                      f'You printed: {output}Original message: {x}\n'
                                      f'(Capitalization does not matter)')


    if __name__ == '__main__':
        DecipherTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import DecipherTest

    if __name__ == '__main__':
        DecipherTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/30390#comment
status: Failed
record: 2
